package com.zzw.github.graphql.schema.inputobjects;

import com.zzw.github.graphql.schema.annotations.Argument;
import com.zzw.github.graphql.schema.annotations.Arguments;
import com.zzw.github.graphql.schema.annotations.Description;
import com.zzw.github.graphql.schema.annotations.ImplementedBy;
import com.zzw.github.graphql.schema.annotations.NonNull;

@Description("Autogenerated input type of CreateDeployment")
public class CreateDeploymentInput {
    @Description("Attempt to automatically merge the default branch into the requested ref, defaults to true.")
    private com.zzw.github.graphql.schema.scalars.Boolean autoMerge;
    public com.zzw.github.graphql.schema.scalars.Boolean getAutoMerge() { return this.autoMerge; }
    public void setAutoMerge(com.zzw.github.graphql.schema.scalars.Boolean autoMerge) { this.autoMerge = autoMerge; }

    @Description("A unique identifier for the client performing the mutation.")
    private com.zzw.github.graphql.schema.scalars.String clientMutationId;
    public com.zzw.github.graphql.schema.scalars.String getClientMutationId() { return this.clientMutationId; }
    public void setClientMutationId(com.zzw.github.graphql.schema.scalars.String clientMutationId) { this.clientMutationId = clientMutationId; }

    @Description("Short description of the deployment.")
    private com.zzw.github.graphql.schema.scalars.String description;
    public com.zzw.github.graphql.schema.scalars.String getDescription() { return this.description; }
    public void setDescription(com.zzw.github.graphql.schema.scalars.String description) { this.description = description; }

    @Description("Name for the target deployment environment.")
    private com.zzw.github.graphql.schema.scalars.String environment;
    public com.zzw.github.graphql.schema.scalars.String getEnvironment() { return this.environment; }
    public void setEnvironment(com.zzw.github.graphql.schema.scalars.String environment) { this.environment = environment; }

    @Description("JSON payload with extra information about the deployment.")
    private com.zzw.github.graphql.schema.scalars.String payload;
    public com.zzw.github.graphql.schema.scalars.String getPayload() { return this.payload; }
    public void setPayload(com.zzw.github.graphql.schema.scalars.String payload) { this.payload = payload; }

    @NonNull("!")
    @Description("The node ID of the ref to be deployed.")
    private com.zzw.github.graphql.schema.scalars.ID refId;
    public com.zzw.github.graphql.schema.scalars.ID getRefId() { return this.refId; }
    public void setRefId(com.zzw.github.graphql.schema.scalars.ID refId) { this.refId = refId; }

    @NonNull("!")
    @Description("The node ID of the repository.")
    private com.zzw.github.graphql.schema.scalars.ID repositoryId;
    public com.zzw.github.graphql.schema.scalars.ID getRepositoryId() { return this.repositoryId; }
    public void setRepositoryId(com.zzw.github.graphql.schema.scalars.ID repositoryId) { this.repositoryId = repositoryId; }

    @NonNull("[!]")
    @Description("The status contexts to verify against commit status checks. To bypass required contexts, pass an empty array. Defaults to all unique contexts.")
    private com.zzw.github.graphql.schema.scalars.String[] requiredContexts;
    public com.zzw.github.graphql.schema.scalars.String[] getRequiredContexts() { return this.requiredContexts; }
    public void setRequiredContexts(com.zzw.github.graphql.schema.scalars.String[] requiredContexts) { this.requiredContexts = requiredContexts; }

    @Description("Specifies a task to execute.")
    private com.zzw.github.graphql.schema.scalars.String task;
    public com.zzw.github.graphql.schema.scalars.String getTask() { return this.task; }
    public void setTask(com.zzw.github.graphql.schema.scalars.String task) { this.task = task; }
}
