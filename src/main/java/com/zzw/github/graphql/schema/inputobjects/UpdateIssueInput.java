package com.zzw.github.graphql.schema.inputobjects;

import com.zzw.github.graphql.schema.annotations.Argument;
import com.zzw.github.graphql.schema.annotations.Arguments;
import com.zzw.github.graphql.schema.annotations.Description;
import com.zzw.github.graphql.schema.annotations.ImplementedBy;
import com.zzw.github.graphql.schema.annotations.NonNull;

@Description("Autogenerated input type of UpdateIssue")
public class UpdateIssueInput {
    @NonNull("[!]")
    @Description("An array of Node IDs of users for this issue.")
    private com.zzw.github.graphql.schema.scalars.ID[] assigneeIds;
    public com.zzw.github.graphql.schema.scalars.ID[] getAssigneeIds() { return this.assigneeIds; }
    public void setAssigneeIds(com.zzw.github.graphql.schema.scalars.ID[] assigneeIds) { this.assigneeIds = assigneeIds; }

    @Description("The body for the issue description.")
    private com.zzw.github.graphql.schema.scalars.String body;
    public com.zzw.github.graphql.schema.scalars.String getBody() { return this.body; }
    public void setBody(com.zzw.github.graphql.schema.scalars.String body) { this.body = body; }

    @Description("A unique identifier for the client performing the mutation.")
    private com.zzw.github.graphql.schema.scalars.String clientMutationId;
    public com.zzw.github.graphql.schema.scalars.String getClientMutationId() { return this.clientMutationId; }
    public void setClientMutationId(com.zzw.github.graphql.schema.scalars.String clientMutationId) { this.clientMutationId = clientMutationId; }

    @NonNull("!")
    @Description("The ID of the Issue to modify.")
    private com.zzw.github.graphql.schema.scalars.ID id;
    public com.zzw.github.graphql.schema.scalars.ID getId() { return this.id; }
    public void setId(com.zzw.github.graphql.schema.scalars.ID id) { this.id = id; }

    @NonNull("[!]")
    @Description("An array of Node IDs of labels for this issue.")
    private com.zzw.github.graphql.schema.scalars.ID[] labelIds;
    public com.zzw.github.graphql.schema.scalars.ID[] getLabelIds() { return this.labelIds; }
    public void setLabelIds(com.zzw.github.graphql.schema.scalars.ID[] labelIds) { this.labelIds = labelIds; }

    @Description("The Node ID of the milestone for this issue.")
    private com.zzw.github.graphql.schema.scalars.ID milestoneId;
    public com.zzw.github.graphql.schema.scalars.ID getMilestoneId() { return this.milestoneId; }
    public void setMilestoneId(com.zzw.github.graphql.schema.scalars.ID milestoneId) { this.milestoneId = milestoneId; }

    @NonNull("[!]")
    @Description("An array of Node IDs for projects associated with this issue.")
    private com.zzw.github.graphql.schema.scalars.ID[] projectIds;
    public com.zzw.github.graphql.schema.scalars.ID[] getProjectIds() { return this.projectIds; }
    public void setProjectIds(com.zzw.github.graphql.schema.scalars.ID[] projectIds) { this.projectIds = projectIds; }

    @Description("The desired issue state.")
    private com.zzw.github.graphql.schema.enums.IssueState state;
    public com.zzw.github.graphql.schema.enums.IssueState getState() { return this.state; }
    public void setState(com.zzw.github.graphql.schema.enums.IssueState state) { this.state = state; }

    @Description("The title for the issue.")
    private com.zzw.github.graphql.schema.scalars.String title;
    public com.zzw.github.graphql.schema.scalars.String getTitle() { return this.title; }
    public void setTitle(com.zzw.github.graphql.schema.scalars.String title) { this.title = title; }
}
