package com.zzw.github.graphql.schema.inputobjects;

import com.zzw.github.graphql.schema.annotations.Argument;
import com.zzw.github.graphql.schema.annotations.Arguments;
import com.zzw.github.graphql.schema.annotations.Description;
import com.zzw.github.graphql.schema.annotations.ImplementedBy;
import com.zzw.github.graphql.schema.annotations.NonNull;

@Description("Autogenerated input type of CreateBranchProtectionRule")
public class CreateBranchProtectionRuleInput {
    @Description("A unique identifier for the client performing the mutation.")
    private com.zzw.github.graphql.schema.scalars.String clientMutationId;
    public com.zzw.github.graphql.schema.scalars.String getClientMutationId() { return this.clientMutationId; }
    public void setClientMutationId(com.zzw.github.graphql.schema.scalars.String clientMutationId) { this.clientMutationId = clientMutationId; }

    @Description("Will new commits pushed to matching branches dismiss pull request review approvals.")
    private com.zzw.github.graphql.schema.scalars.Boolean dismissesStaleReviews;
    public com.zzw.github.graphql.schema.scalars.Boolean getDismissesStaleReviews() { return this.dismissesStaleReviews; }
    public void setDismissesStaleReviews(com.zzw.github.graphql.schema.scalars.Boolean dismissesStaleReviews) { this.dismissesStaleReviews = dismissesStaleReviews; }

    @Description("Can admins overwrite branch protection.")
    private com.zzw.github.graphql.schema.scalars.Boolean isAdminEnforced;
    public com.zzw.github.graphql.schema.scalars.Boolean getIsAdminEnforced() { return this.isAdminEnforced; }
    public void setIsAdminEnforced(com.zzw.github.graphql.schema.scalars.Boolean isAdminEnforced) { this.isAdminEnforced = isAdminEnforced; }

    @NonNull("!")
    @Description("The glob-like pattern used to determine matching branches.")
    private com.zzw.github.graphql.schema.scalars.String pattern;
    public com.zzw.github.graphql.schema.scalars.String getPattern() { return this.pattern; }
    public void setPattern(com.zzw.github.graphql.schema.scalars.String pattern) { this.pattern = pattern; }

    @NonNull("[!]")
    @Description("A list of User or Team IDs allowed to push to matching branches.")
    private com.zzw.github.graphql.schema.scalars.ID[] pushActorIds;
    public com.zzw.github.graphql.schema.scalars.ID[] getPushActorIds() { return this.pushActorIds; }
    public void setPushActorIds(com.zzw.github.graphql.schema.scalars.ID[] pushActorIds) { this.pushActorIds = pushActorIds; }

    @NonNull("!")
    @Description("The global relay id of the repository in which a new branch protection rule should be created in.")
    private com.zzw.github.graphql.schema.scalars.ID repositoryId;
    public com.zzw.github.graphql.schema.scalars.ID getRepositoryId() { return this.repositoryId; }
    public void setRepositoryId(com.zzw.github.graphql.schema.scalars.ID repositoryId) { this.repositoryId = repositoryId; }

    @Description("Number of approving reviews required to update matching branches.")
    private com.zzw.github.graphql.schema.scalars.Int requiredApprovingReviewCount;
    public com.zzw.github.graphql.schema.scalars.Int getRequiredApprovingReviewCount() { return this.requiredApprovingReviewCount; }
    public void setRequiredApprovingReviewCount(com.zzw.github.graphql.schema.scalars.Int requiredApprovingReviewCount) { this.requiredApprovingReviewCount = requiredApprovingReviewCount; }

    @NonNull("[!]")
    @Description("List of required status check contexts that must pass for commits to be accepted to matching branches.")
    private com.zzw.github.graphql.schema.scalars.String[] requiredStatusCheckContexts;
    public com.zzw.github.graphql.schema.scalars.String[] getRequiredStatusCheckContexts() { return this.requiredStatusCheckContexts; }
    public void setRequiredStatusCheckContexts(com.zzw.github.graphql.schema.scalars.String[] requiredStatusCheckContexts) { this.requiredStatusCheckContexts = requiredStatusCheckContexts; }

    @Description("Are approving reviews required to update matching branches.")
    private com.zzw.github.graphql.schema.scalars.Boolean requiresApprovingReviews;
    public com.zzw.github.graphql.schema.scalars.Boolean getRequiresApprovingReviews() { return this.requiresApprovingReviews; }
    public void setRequiresApprovingReviews(com.zzw.github.graphql.schema.scalars.Boolean requiresApprovingReviews) { this.requiresApprovingReviews = requiresApprovingReviews; }

    @Description("Are reviews from code owners required to update matching branches.")
    private com.zzw.github.graphql.schema.scalars.Boolean requiresCodeOwnerReviews;
    public com.zzw.github.graphql.schema.scalars.Boolean getRequiresCodeOwnerReviews() { return this.requiresCodeOwnerReviews; }
    public void setRequiresCodeOwnerReviews(com.zzw.github.graphql.schema.scalars.Boolean requiresCodeOwnerReviews) { this.requiresCodeOwnerReviews = requiresCodeOwnerReviews; }

    @Description("Are commits required to be signed.")
    private com.zzw.github.graphql.schema.scalars.Boolean requiresCommitSignatures;
    public com.zzw.github.graphql.schema.scalars.Boolean getRequiresCommitSignatures() { return this.requiresCommitSignatures; }
    public void setRequiresCommitSignatures(com.zzw.github.graphql.schema.scalars.Boolean requiresCommitSignatures) { this.requiresCommitSignatures = requiresCommitSignatures; }

    @Description("Are status checks required to update matching branches.")
    private com.zzw.github.graphql.schema.scalars.Boolean requiresStatusChecks;
    public com.zzw.github.graphql.schema.scalars.Boolean getRequiresStatusChecks() { return this.requiresStatusChecks; }
    public void setRequiresStatusChecks(com.zzw.github.graphql.schema.scalars.Boolean requiresStatusChecks) { this.requiresStatusChecks = requiresStatusChecks; }

    @Description("Are branches required to be up to date before merging.")
    private com.zzw.github.graphql.schema.scalars.Boolean requiresStrictStatusChecks;
    public com.zzw.github.graphql.schema.scalars.Boolean getRequiresStrictStatusChecks() { return this.requiresStrictStatusChecks; }
    public void setRequiresStrictStatusChecks(com.zzw.github.graphql.schema.scalars.Boolean requiresStrictStatusChecks) { this.requiresStrictStatusChecks = requiresStrictStatusChecks; }

    @Description("Is pushing to matching branches restricted.")
    private com.zzw.github.graphql.schema.scalars.Boolean restrictsPushes;
    public com.zzw.github.graphql.schema.scalars.Boolean getRestrictsPushes() { return this.restrictsPushes; }
    public void setRestrictsPushes(com.zzw.github.graphql.schema.scalars.Boolean restrictsPushes) { this.restrictsPushes = restrictsPushes; }

    @Description("Is dismissal of pull request reviews restricted.")
    private com.zzw.github.graphql.schema.scalars.Boolean restrictsReviewDismissals;
    public com.zzw.github.graphql.schema.scalars.Boolean getRestrictsReviewDismissals() { return this.restrictsReviewDismissals; }
    public void setRestrictsReviewDismissals(com.zzw.github.graphql.schema.scalars.Boolean restrictsReviewDismissals) { this.restrictsReviewDismissals = restrictsReviewDismissals; }

    @NonNull("[!]")
    @Description("A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.")
    private com.zzw.github.graphql.schema.scalars.ID[] reviewDismissalActorIds;
    public com.zzw.github.graphql.schema.scalars.ID[] getReviewDismissalActorIds() { return this.reviewDismissalActorIds; }
    public void setReviewDismissalActorIds(com.zzw.github.graphql.schema.scalars.ID[] reviewDismissalActorIds) { this.reviewDismissalActorIds = reviewDismissalActorIds; }
}
